name: CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint Action Files
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate action.yml
        run: |
          # Check action.yml exists and is valid YAML
          if [ ! -f "action.yml" ]; then
            echo "ERROR: action.yml not found"
            exit 1
          fi
          
          # Use yq to validate YAML syntax
          if ! command -v yq &> /dev/null; then
            echo "Installing yq..."
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi
          
          yq eval '.' action.yml > /dev/null || { echo "ERROR: Invalid YAML in action.yml"; exit 1; }
          echo "✅ action.yml is valid YAML"
          
          # Check required fields
          NAME=$(yq eval '.name' action.yml)
          DESC=$(yq eval '.description' action.yml)
          
          if [ "$NAME" == "null" ] || [ -z "$NAME" ]; then
            echo "ERROR: action.yml missing 'name' field"
            exit 1
          fi
          
          if [ "$DESC" == "null" ] || [ -z "$DESC" ]; then
            echo "ERROR: action.yml missing 'description' field"
            exit 1
          fi
          
          echo "✅ Required fields present in action.yml"
      
      - name: Check for required files
        run: |
          # Check for required documentation files
          REQUIRED_FILES=("README.md" "LICENSE" "action.yml")
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "ERROR: Required file $file not found"
              exit 1
            fi
          done
          
          echo "✅ All required files present"
      
      - name: Validate README
        run: |
          # Check README has minimum content
          README_SIZE=$(wc -c < README.md)
          if [ $README_SIZE -lt 100 ]; then
            echo "ERROR: README.md seems too small ($README_SIZE bytes)"
            exit 1
          fi
          
          # Check for required sections
          if ! grep -q "## Usage" README.md && ! grep -q "## Quick Start" README.md; then
            echo "WARNING: README.md should have a Usage or Quick Start section"
          fi
          
          if ! grep -q "## Inputs" README.md; then
            echo "WARNING: README.md should document inputs"
          fi
          
          if ! grep -q "## Outputs" README.md; then
            echo "WARNING: README.md should document outputs"
          fi
          
          echo "✅ README.md appears complete"

  shellcheck:
    runs-on: ubuntu-latest
    name: ShellCheck
    steps:
      - uses: actions/checkout@v4
      
      - name: Run ShellCheck on action script
        run: |
          # Extract the shell script from action.yml
          yq eval '.runs.steps[0].run' action.yml > /tmp/action-script.sh
          
          # Run shellcheck
          shellcheck -S warning /tmp/action-script.sh || true
          echo "✅ ShellCheck analysis complete"

  test-matrix:
    runs-on: ubuntu-latest
    name: Test Core Functionality
    strategy:
      matrix:
        test_case:
          - name: "AWS ECR"
            image: "123456789012.dkr.ecr.us-east-1.amazonaws.com/service"
            expected_provider: "aws"
            expected_type: "ecr"
          - name: "GCP Artifact Registry"
            image: "us-central1-docker.pkg.dev/project/registry/service"
            expected_provider: "gcp"
            expected_type: "artifact-registry"
          - name: "Azure ACR"
            image: "myregistry.azurecr.io/service"
            expected_provider: "azure"
            expected_type: "acr"
          - name: "GitHub Container Registry"
            image: "ghcr.io/org/service"
            expected_provider: "github"
            expected_type: "ghcr"
          - name: "Docker Hub"
            image: "user/service"
            expected_provider: "dockerhub"
            expected_type: "dockerhub"
    steps:
      - uses: actions/checkout@v4
      
      - name: Test ${{ matrix.test_case.name }}
        uses: ./
        id: test
        with:
          image: ${{ matrix.test_case.image }}
          
      - name: Verify ${{ matrix.test_case.name }}
        run: |
          echo "Testing: ${{ matrix.test_case.name }}"
          echo "Image: ${{ matrix.test_case.image }}"
          echo "Provider: ${{ steps.test.outputs.provider }}"
          echo "Type: ${{ steps.test.outputs.registry_type }}"
          
          if [[ "${{ steps.test.outputs.provider }}" != "${{ matrix.test_case.expected_provider }}" ]]; then
            echo "ERROR: Provider mismatch"
            echo "Expected: ${{ matrix.test_case.expected_provider }}"
            echo "Actual: ${{ steps.test.outputs.provider }}"
            exit 1
          fi
          
          if [[ "${{ steps.test.outputs.registry_type }}" != "${{ matrix.test_case.expected_type }}" ]]; then
            echo "ERROR: Registry type mismatch"
            echo "Expected: ${{ matrix.test_case.expected_type }}"
            echo "Actual: ${{ steps.test.outputs.registry_type }}"
            exit 1
          fi
          
          echo "✅ Test passed"

  all-tests-pass:
    runs-on: ubuntu-latest
    needs: [lint, shellcheck, test-matrix]
    steps:
      - name: All tests passed
        run: echo "✅ All CI checks passed successfully!"